{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import { LitElement, html, css } from '@esm/lit-all';\nimport { customElement, property } from '@esm/lit-all';\nimport type { ISqlEditor, IQueryResult } from '@esm/interfaces';\nimport '@esm/h2-core';\nimport '@esm/h2-extra';\n\n@customElement('o2-sql-editor')\nexport class O2SqlEditor extends LitElement implements ISqlEditor {\n  static styles = css`\n    :host {\n      display: block;\n      height: 100%;\n    }\n    \n    .sql-editor {\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .toolbar {\n      padding: 8px;\n      border-bottom: 1px solid #e0e0e0;\n      display: flex;\n      gap: 8px;\n    }\n    \n    .editor-area {\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .code-editor {\n      flex: 1;\n      border: none;\n      padding: 12px;\n      font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;\n      font-size: 14px;\n      resize: none;\n      outline: none;\n    }\n    \n    .results {\n      border-top: 1px solid #e0e0e0;\n      max-height: 300px;\n      overflow: auto;\n    }\n  `;\n\n  @property({ type: String })\n  value = '';\n\n  @property({ type: Boolean })\n  readOnly = false;\n\n  render() {\n    return html`\n      <div class=\"sql-editor\">\n        <div class=\"toolbar\">\n          <h2-button variant=\"primary\" @h2-click=\"${this._handleExecute}\">Execute</h2-button>\n          <h2-button variant=\"secondary\" @h2-click=\"${this._handleFormat}\">Format</h2-button>\n        </div>\n        \n        <div class=\"editor-area\">\n          <textarea \n            class=\"code-editor\"\n            .value=\"${this.value}\"\n            ?readonly=\"${this.readOnly}\"\n            placeholder=\"Enter SQL query...\"\n            @input=\"${this._handleInput}\"\n          ></textarea>\n          \n          <div class=\"results\">\n            <slot name=\"results\"></slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleInput(e: Event) {\n    const target = e.target as HTMLTextAreaElement;\n    this.value = target.value;\n  }\n\n  private _handleExecute() {\n    this.execute();\n  }\n\n  private _handleFormat() {\n    this.format();\n  }\n\n  async load(data: string): Promise<void> {\n    this.value = data;\n  }\n\n  async save(): Promise<string> {\n    return this.value;\n  }\n\n  isDirty(): boolean {\n    return false;\n  }\n\n  validate(): boolean {\n    return true;\n  }\n\n  getValidationErrors(): string[] {\n    return [];\n  }\n\n  setReadOnly(readOnly: boolean): void {\n    this.readOnly = readOnly;\n  }\n\n  isReadOnly(): boolean {\n    return this.readOnly;\n  }\n\n  async execute(): Promise<IQueryResult> {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    return {\n      success: true,\n      data: [\n        { id: 1, name: 'John', email: 'john@example.com' },\n        { id: 2, name: 'Jane', email: 'jane@example.com' }\n      ],\n      columns: [\n        { name: 'id', type: 'INTEGER' },\n        { name: 'name', type: 'VARCHAR' },\n        { name: 'email', type: 'VARCHAR' }\n      ],\n      rowCount: 2,\n      executionTime: 123\n    };\n  }\n\n  format(): void {\n    this.value = this.value.replace(/\\s+/g, ' ').trim();\n  }\n\n  getSelectedText(): string {\n    return '';\n  }\n\n  insertText(text: string): void {\n    this.value += text;\n  }\n\n  setAutoComplete(enabled: boolean): void {\n    // Implementation placeholder\n  }\n\n\n  destroy(): void {\n    this.value = '';\n  }\n}\n\n"],"names":["O2SqlEditor","LitElement","html","target","data","readOnly","resolve","text","enabled","css","__decorateClass","property","customElement"],"mappings":";;;;;;;;AAOa,IAAAA,IAAN,cAA0BC,EAAiC;AAAA,EAA3D,cAAA;AAAA,UAAA,GAAA,SAAA,GA4CG,KAAA,QAAA,IAGG,KAAA,WAAA;AAAA,EAAA;AAAA,EAEX,SAAS;AACA,WAAAC;AAAA;AAAA;AAAA,oDAGyC,KAAK,cAAc;AAAA,sDACjB,KAAK,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMlD,KAAK,KAAK;AAAA,yBACP,KAAK,QAAQ;AAAA;AAAA,sBAEhB,KAAK,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASrC;AAAA,EAEQ,aAAa,GAAU;AAC7B,UAAMC,IAAS,EAAE;AACjB,SAAK,QAAQA,EAAO;AAAA,EACtB;AAAA,EAEQ,iBAAiB;AACvB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEQ,gBAAgB;AACtB,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,MAAM,KAAKC,GAA6B;AACtC,SAAK,QAAQA;AAAA,EACf;AAAA,EAEA,MAAM,OAAwB;AAC5B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,UAAmB;AACV,WAAA;AAAA,EACT;AAAA,EAEA,WAAoB;AACX,WAAA;AAAA,EACT;AAAA,EAEA,sBAAgC;AAC9B,WAAO;EACT;AAAA,EAEA,YAAYC,GAAyB;AACnC,SAAK,WAAWA;AAAA,EAClB;AAAA,EAEA,aAAsB;AACpB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,UAAiC;AACrC,iBAAM,IAAI,QAAQ,CAAAC,MAAW,WAAWA,GAAS,GAAG,CAAC,GAE9C;AAAA,MACL,SAAS;AAAA,MACT,MAAM;AAAA,QACJ,EAAE,IAAI,GAAG,MAAM,QAAQ,OAAO,mBAAmB;AAAA,QACjD,EAAE,IAAI,GAAG,MAAM,QAAQ,OAAO,mBAAmB;AAAA,MACnD;AAAA,MACA,SAAS;AAAA,QACP,EAAE,MAAM,MAAM,MAAM,UAAU;AAAA,QAC9B,EAAE,MAAM,QAAQ,MAAM,UAAU;AAAA,QAChC,EAAE,MAAM,SAAS,MAAM,UAAU;AAAA,MACnC;AAAA,MACA,UAAU;AAAA,MACV,eAAe;AAAA,IAAA;AAAA,EAEnB;AAAA,EAEA,SAAe;AACb,SAAK,QAAQ,KAAK,MAAM,QAAQ,QAAQ,GAAG,EAAE;EAC/C;AAAA,EAEA,kBAA0B;AACjB,WAAA;AAAA,EACT;AAAA,EAEA,WAAWC,GAAoB;AAC7B,SAAK,SAASA;AAAA,EAChB;AAAA,EAEA,gBAAgBC,GAAwB;AAAA,EAExC;AAAA,EAGA,UAAgB;AACd,SAAK,QAAQ;AAAA,EACf;AACF;AA1JaR,EACJ,SAASS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2ChBC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAQ;AAAA,GA3CfX,EA4CX,WAAA,SAAA,CAAA;AAGAU,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,SAAS;AAAA,GA9ChBX,EA+CX,WAAA,YAAA,CAAA;AA/CWA,IAANU,EAAA;AAAA,EADNE,EAAc,eAAe;AAAA,GACjBZ,CAAA;"}