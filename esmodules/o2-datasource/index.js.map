{"version":3,"file":"index.js","sources":["../src/components/datasource-viewer/o2-datasource-viewer.ts","../src/components/datasource-editor/o2-datasource-editor.ts"],"sourcesContent":["import { LitElement, html, css } from '@esm/lit-all';\nimport { customElement, property, state } from '@esm/lit-all';\nimport type { IDataSourceViewer, IDataSourceConfig, ISchemaInfo } from '@esm/interfaces';\nimport '@esm/h2-core';\nimport '@esm/h2-extra';\n\n@customElement('o2-datasource-viewer')\nexport class O2DataSourceViewer extends LitElement implements IDataSourceViewer {\n  static styles = css`\n    :host {\n      display: block;\n      height: 100%;\n      overflow: hidden;\n    }\n    \n    .viewer {\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    }\n    \n    .toolbar {\n      padding: 12px;\n      border-bottom: 1px solid var(--o2-ds-border-color, #e0e0e0);\n      background: var(--o2-ds-toolbar-bg, #f8f9fa);\n      display: flex;\n      gap: 8px;\n      align-items: center;\n    }\n    \n    .content {\n      flex: 1;\n      display: flex;\n      overflow: hidden;\n    }\n    \n    .schema-panel {\n      width: 300px;\n      border-right: 1px solid var(--o2-ds-border-color, #e0e0e0);\n      overflow-y: auto;\n      padding: 12px;\n    }\n    \n    .data-panel {\n      flex: 1;\n      padding: 12px;\n      overflow: hidden;\n    }\n    \n    .connection-info {\n      background: var(--o2-ds-info-bg, #e3f2fd);\n      padding: 8px 12px;\n      border-radius: 4px;\n      margin-bottom: 12px;\n      font-size: 14px;\n    }\n    \n    .status {\n      display: flex;\n      align-items: center;\n      gap: 4px;\n    }\n    \n    .status.connected {\n      color: var(--o2-ds-success-color, #28a745);\n    }\n    \n    .status.disconnected {\n      color: var(--o2-ds-error-color, #dc3545);\n    }\n    \n    .loading {\n      padding: 40px;\n      text-align: center;\n      color: var(--o2-ds-muted-color, #666);\n    }\n    \n    .error {\n      padding: 40px;\n      text-align: center;\n      color: var(--o2-ds-error-color, #dc3545);\n    }\n  `;\n\n  @property({ type: Object })\n  data: IDataSourceConfig | null = null;\n\n  @property({ type: Boolean })\n  readOnly = false;\n\n  @state()\n  private _schema: ISchemaInfo | null = null;\n\n  @state()\n  private _connected = false;\n\n  @state()\n  private _loading = false;\n\n  @state()\n  private _error = '';\n\n  @state()\n  private _previewData: any[] = [];\n\n  render() {\n    return html`\n      <div class=\"viewer\">\n        <div class=\"toolbar\">\n          <h2-button \n            variant=\"primary\"\n            @h2-click=\"${this._handleTestConnection}\"\n            ?disabled=\"${!this.data || this._loading}\"\n          >\n            Test Connection\n          </h2-button>\n          \n          <h2-button \n            variant=\"secondary\"\n            @h2-click=\"${this._handleRefreshSchema}\"\n            ?disabled=\"${!this._connected || this._loading}\"\n          >\n            Refresh Schema\n          </h2-button>\n          \n          <h2-button \n            variant=\"secondary\"\n            @h2-click=\"${this._handlePreviewData}\"\n            ?disabled=\"${!this._connected || this._loading}\"\n          >\n            Preview Data\n          </h2-button>\n        </div>\n        \n        <div class=\"content\">\n          <div class=\"schema-panel\">\n            ${this._renderConnectionInfo()}\n            ${this._renderSchema()}\n          </div>\n          \n          <div class=\"data-panel\">\n            ${this._renderDataPreview()}\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _renderConnectionInfo() {\n    if (!this.data) return '';\n    \n    return html`\n      <div class=\"connection-info\">\n        <div><strong>Name:</strong> ${this.data.name}</div>\n        <div><strong>Type:</strong> ${this.data.type}</div>\n        <div><strong>Host:</strong> ${this.data.host}:${this.data.port}</div>\n        <div><strong>Database:</strong> ${this.data.database}</div>\n        <div class=\"status ${this._connected ? 'connected' : 'disconnected'}\">\n          <strong>Status:</strong> ${this._connected ? 'üü¢ Connected' : 'üî¥ Disconnected'}\n        </div>\n      </div>\n    `;\n  }\n\n  private _renderSchema() {\n    if (this._loading) {\n      return html`<div class=\"loading\">Loading schema...</div>`;\n    }\n    \n    if (this._error) {\n      return html`<div class=\"error\">${this._error}</div>`;\n    }\n    \n    if (!this._schema) {\n      return html`<div class=\"loading\">No schema loaded</div>`;\n    }\n    \n    return html`\n      <h2-tree \n        .data=\"${this._convertSchemaToTree()}\"\n        @node-click=\"${this._handleSchemaNodeClick}\"\n      ></h2-tree>\n    `;\n  }\n\n  private _renderDataPreview() {\n    if (this._previewData.length === 0) {\n      return html`<div class=\"loading\">No data preview available</div>`;\n    }\n    \n    const columns = Object.keys(this._previewData[0]).map(key => ({\n      key,\n      title: key,\n      width: 150\n    }));\n    \n    return html`\n      <h2-datagrid\n        .columns=\"${columns}\"\n        .data=\"${this._previewData}\"\n        .options=\"${{ pagination: true, pageSize: 50 }}\"\n      ></h2-datagrid>\n    `;\n  }\n\n  private _convertSchemaToTree() {\n    if (!this._schema) return [];\n    \n    return [\n      {\n        id: 'tables',\n        label: `Tables (${this._schema.tables.length})`,\n        icon: 'üìä',\n        expanded: true,\n        children: this._schema.tables.map(table => ({\n          id: `table-${table.name}`,\n          label: table.name,\n          icon: 'üìã',\n          data: { type: 'table', table },\n          children: table.columns.map(column => ({\n            id: `column-${table.name}-${column.name}`,\n            label: `${column.name} (${column.type})`,\n            icon: column.nullable ? 'üîµ' : 'üî¥',\n            data: { type: 'column', column }\n          }))\n        }))\n      },\n      {\n        id: 'views',\n        label: `Views (${this._schema.views.length})`,\n        icon: 'üëÅÔ∏è',\n        expanded: true,\n        children: this._schema.views.map(view => ({\n          id: `view-${view.name}`,\n          label: view.name,\n          icon: 'üëÅÔ∏è',\n          data: { type: 'view', view }\n        }))\n      }\n    ];\n  }\n\n  private async _handleTestConnection() {\n    this._loading = true;\n    this._error = '';\n    \n    try {\n      const connected = await this.testConnection();\n      this._connected = connected;\n      \n      if (connected) {\n        await this._loadSchema();\n      }\n    } catch (error) {\n      this._error = error instanceof Error ? error.message : 'Connection failed';\n      this._connected = false;\n    } finally {\n      this._loading = false;\n    }\n  }\n\n  private async _handleRefreshSchema() {\n    await this._loadSchema();\n  }\n\n  private async _handlePreviewData() {\n    if (!this._schema || this._schema.tables.length === 0) return;\n    \n    try {\n      const firstTable = this._schema.tables[0];\n      this._previewData = await this.previewData(10);\n    } catch (error) {\n      this._error = error instanceof Error ? error.message : 'Failed to preview data';\n    }\n  }\n\n  private _handleSchemaNodeClick(e: CustomEvent) {\n    const { node } = e.detail;\n    \n    this.dispatchEvent(new CustomEvent('schema-item-select', {\n      detail: { item: node.data },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  private async _loadSchema() {\n    this._loading = true;\n    this._error = '';\n    \n    try {\n      this._schema = await this.getSchema();\n    } catch (error) {\n      this._error = error instanceof Error ? error.message : 'Failed to load schema';\n    } finally {\n      this._loading = false;\n    }\n  }\n\n  async load(data: IDataSourceConfig): Promise<void> {\n    this.data = data;\n    this._connected = false;\n    this._schema = null;\n    this._previewData = [];\n    this._error = '';\n  }\n\n  async refresh(): Promise<void> {\n    if (this._connected) {\n      await this._loadSchema();\n    }\n  }\n\n  getViewData(): IDataSourceConfig {\n    if (!this.data) {\n      throw new Error('No data source configuration loaded');\n    }\n    return this.data;\n  }\n\n  setReadOnly(readOnly: boolean): void {\n    this.readOnly = readOnly;\n  }\n\n  isReadOnly(): boolean {\n    return this.readOnly;\n  }\n\n  async testConnection(): Promise<boolean> {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return Math.random() > 0.3;\n  }\n\n  async getSchema(): Promise<ISchemaInfo> {\n    await new Promise(resolve => setTimeout(resolve, 800));\n    \n    return {\n      tables: [\n        {\n          name: 'users',\n          columns: [\n            { name: 'id', type: 'INTEGER', nullable: false },\n            { name: 'name', type: 'VARCHAR(255)', nullable: false },\n            { name: 'email', type: 'VARCHAR(255)', nullable: true }\n          ],\n          primaryKeys: ['id'],\n          foreignKeys: []\n        },\n        {\n          name: 'orders',\n          columns: [\n            { name: 'id', type: 'INTEGER', nullable: false },\n            { name: 'user_id', type: 'INTEGER', nullable: false },\n            { name: 'total', type: 'DECIMAL(10,2)', nullable: false }\n          ],\n          primaryKeys: ['id'],\n          foreignKeys: [\n            { name: 'fk_user', columns: ['user_id'], referencedTable: 'users', referencedColumns: ['id'] }\n          ]\n        }\n      ],\n      views: [\n        {\n          name: 'user_orders',\n          definition: 'SELECT u.name, COUNT(o.id) as order_count FROM users u LEFT JOIN orders o ON u.id = o.user_id GROUP BY u.id',\n          columns: [\n            { name: 'name', type: 'VARCHAR(255)', nullable: false },\n            { name: 'order_count', type: 'INTEGER', nullable: false }\n          ]\n        }\n      ]\n    };\n  }\n\n  async previewData(limit = 10): Promise<any[]> {\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    return Array.from({ length: limit }, (_, i) => ({\n      id: i + 1,\n      name: `User ${i + 1}`,\n      email: `user${i + 1}@example.com`,\n      created_at: new Date().toISOString()\n    }));\n  }\n\n\n  destroy(): void {\n    this.data = null;\n    this._schema = null;\n    this._previewData = [];\n    this._connected = false;\n  }\n}","import { LitElement, html, css } from '@esm/lit-all';\nimport { customElement, property, state } from '@esm/lit-all';\nimport type { IEditor, IDataSourceConfig } from '@esm/interfaces';\nimport '@esm/h2-core';\n\n@customElement('o2-datasource-editor')\nexport class O2DataSourceEditor extends LitElement implements IEditor<IDataSourceConfig> {\n  static styles = css`\n    :host {\n      display: block;\n      height: 100%;\n    }\n    \n    .editor {\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n      padding: 20px;\n      gap: 16px;\n    }\n    \n    .form-row {\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 16px;\n    }\n    \n    .form-row.full {\n      grid-template-columns: 1fr;\n    }\n    \n    .validation-errors {\n      background: var(--o2-editor-error-bg, #f8d7da);\n      border: 1px solid var(--o2-editor-error-border, #f5c6cb);\n      color: var(--o2-editor-error-color, #721c24);\n      padding: 12px;\n      border-radius: 4px;\n      margin-bottom: 16px;\n    }\n    \n    .error-item {\n      margin: 4px 0;\n    }\n    \n    .dirty-indicator {\n      color: var(--o2-editor-dirty-color, #ffc107);\n      font-size: 14px;\n      font-style: italic;\n    }\n  `;\n\n  @property({ type: Object })\n  data: IDataSourceConfig = {\n    id: '',\n    name: '',\n    type: 'mysql',\n    host: 'localhost',\n    port: 3306,\n    database: '',\n    username: ''\n  };\n\n  @property({ type: Boolean })\n  readOnly = false;\n\n  @state()\n  private _isDirty = false;\n\n  @state()\n  private _validationErrors: string[] = [];\n\n  @state()\n  private _originalData: IDataSourceConfig | null = null;\n\n  render() {\n    return html`\n      <div class=\"editor\">\n        ${this._isDirty ? html`\n          <div class=\"dirty-indicator\">* Configuration has unsaved changes</div>\n        ` : ''}\n        \n        ${this._validationErrors.length > 0 ? html`\n          <div class=\"validation-errors\">\n            <strong>Validation Errors:</strong>\n            ${this._validationErrors.map(error => html`\n              <div class=\"error-item\">${error}</div>\n            `)}\n          </div>\n        ` : ''}\n        \n        <div class=\"form-row\">\n          <h2-input\n            label=\"Configuration Name\"\n            .value=\"${this.data.name}\"\n            placeholder=\"Enter configuration name\"\n            ?disabled=\"${this.readOnly}\"\n            @h2-input=\"${(e: CustomEvent) => this._updateField('name', e.detail.value)}\"\n          ></h2-input>\n          \n          <h2-select\n            label=\"Database Type\"\n            .value=\"${this.data.type}\"\n            .options=\"${[\n              { value: 'mysql', label: 'MySQL' },\n              { value: 'postgresql', label: 'PostgreSQL' },\n              { value: 'oracle', label: 'Oracle' },\n              { value: 'sqlserver', label: 'SQL Server' },\n              { value: 'mongodb', label: 'MongoDB' }\n            ]}\"\n            ?disabled=\"${this.readOnly}\"\n            @h2-change=\"${(e: CustomEvent) => this._updateField('type', e.detail.value)}\"\n          ></h2-select>\n        </div>\n        \n        <div class=\"form-row\">\n          <h2-input\n            label=\"Host\"\n            .value=\"${this.data.host}\"\n            placeholder=\"localhost\"\n            ?disabled=\"${this.readOnly}\"\n            @h2-input=\"${(e: CustomEvent) => this._updateField('host', e.detail.value)}\"\n          ></h2-input>\n          \n          <h2-input\n            label=\"Port\"\n            type=\"number\"\n            .value=\"${String(this.data.port)}\"\n            placeholder=\"3306\"\n            ?disabled=\"${this.readOnly}\"\n            @h2-input=\"${(e: CustomEvent) => this._updateField('port', Number(e.detail.value))}\"\n          ></h2-input>\n        </div>\n        \n        <div class=\"form-row\">\n          <h2-input\n            label=\"Database\"\n            .value=\"${this.data.database}\"\n            placeholder=\"Enter database name\"\n            ?disabled=\"${this.readOnly}\"\n            @h2-input=\"${(e: CustomEvent) => this._updateField('database', e.detail.value)}\"\n          ></h2-input>\n          \n          <h2-input\n            label=\"Username\"\n            .value=\"${this.data.username}\"\n            placeholder=\"Enter username\"\n            ?disabled=\"${this.readOnly}\"\n            @h2-input=\"${(e: CustomEvent) => this._updateField('username', e.detail.value)}\"\n          ></h2-input>\n        </div>\n        \n        <div class=\"form-row full\">\n          <h2-input\n            label=\"Password\"\n            type=\"password\"\n            .value=\"${this.data.password || ''}\"\n            placeholder=\"Enter password\"\n            ?disabled=\"${this.readOnly}\"\n            @h2-input=\"${(e: CustomEvent) => this._updateField('password', e.detail.value)}\"\n          ></h2-input>\n        </div>\n      </div>\n    `;\n  }\n\n  private _updateField(field: keyof IDataSourceConfig, value: any) {\n    if (this.readOnly) return;\n    \n    const newData = { ...this.data, [field]: value };\n    this.data = newData;\n    this._isDirty = true;\n    \n    this._validateData();\n    \n    this.dispatchEvent(new CustomEvent('data-change', {\n      detail: { data: this.data, field, value },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  private _validateData() {\n    this._validationErrors = [];\n    \n    if (!this.data.name.trim()) {\n      this._validationErrors.push('Configuration name is required');\n    }\n    \n    if (!this.data.host.trim()) {\n      this._validationErrors.push('Host is required');\n    }\n    \n    if (!this.data.port || this.data.port <= 0 || this.data.port > 65535) {\n      this._validationErrors.push('Port must be between 1 and 65535');\n    }\n    \n    if (!this.data.database.trim()) {\n      this._validationErrors.push('Database name is required');\n    }\n    \n    if (!this.data.username.trim()) {\n      this._validationErrors.push('Username is required');\n    }\n  }\n\n  async load(data: IDataSourceConfig): Promise<void> {\n    this.data = { ...data };\n    this._originalData = { ...data };\n    this._isDirty = false;\n    this._validateData();\n  }\n\n  async save(): Promise<IDataSourceConfig> {\n    if (!this.validate()) {\n      throw new Error('Validation failed: ' + this._validationErrors.join(', '));\n    }\n    \n    this._originalData = { ...this.data };\n    this._isDirty = false;\n    \n    this.dispatchEvent(new CustomEvent('data-save', {\n      detail: { data: this.data },\n      bubbles: true,\n      composed: true\n    }));\n    \n    return { ...this.data };\n  }\n\n  isDirty(): boolean {\n    return this._isDirty;\n  }\n\n  validate(): boolean {\n    this._validateData();\n    return this._validationErrors.length === 0;\n  }\n\n  getValidationErrors(): string[] {\n    return [...this._validationErrors];\n  }\n\n  setReadOnly(readOnly: boolean): void {\n    this.readOnly = readOnly;\n  }\n\n  isReadOnly(): boolean {\n    return this.readOnly;\n  }\n\n\n  destroy(): void {\n    this.data = {\n      id: '',\n      name: '',\n      type: 'mysql',\n      host: 'localhost',\n      port: 3306,\n      database: '',\n      username: ''\n    };\n    this._originalData = null;\n    this._isDirty = false;\n    this._validationErrors = [];\n  }\n\n  reset() {\n    if (this._originalData) {\n      this.data = { ...this._originalData };\n      this._isDirty = false;\n      this._validateData();\n    }\n  }\n}"],"names":["O2DataSourceViewer","LitElement","html","columns","key","table","column","view","connected","error","firstTable","node","data","readOnly","resolve","limit","_","css","__decorateClass","property","state","customElement","O2DataSourceEditor","field","value","newData"],"mappings":"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"}