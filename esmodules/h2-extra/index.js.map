{"version":3,"file":"index.js","sources":["../src/components/tree/h2-tree.ts","../src/components/datagrid/h2-datagrid.ts"],"sourcesContent":["import { LitElement, html, css } from '@esm/lit-all';\nimport { customElement, property, state } from '@esm/lit-all';\nimport type { ITreeNode, ITreeComponent, ITreeEventData } from '@esm/interfaces';\n\n@customElement('h2-tree')\nexport class H2Tree extends LitElement implements ITreeComponent {\n  static styles = css`\n    :host {\n      display: block;\n      font-family: var(--h2-tree-font-family, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif);\n    }\n    \n    .tree {\n      padding: 8px;\n    }\n    \n    .tree-node {\n      margin: 2px 0;\n    }\n    \n    .node-content {\n      display: flex;\n      align-items: center;\n      padding: 4px 8px;\n      cursor: pointer;\n      border-radius: 4px;\n      user-select: none;\n      transition: background-color 0.2s;\n    }\n    \n    .node-content:hover {\n      background-color: var(--h2-tree-hover-bg, #f8f9fa);\n    }\n    \n    .node-content.selected {\n      background-color: var(--h2-tree-selected-bg, #007bff);\n      color: var(--h2-tree-selected-color, white);\n    }\n    \n    .node-content.disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n    \n    .expand-icon {\n      width: 16px;\n      height: 16px;\n      margin-right: 4px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      transition: transform 0.2s;\n    }\n    \n    .expand-icon.expanded {\n      transform: rotate(90deg);\n    }\n    \n    .expand-icon.empty {\n      visibility: hidden;\n    }\n    \n    .node-icon {\n      width: 16px;\n      height: 16px;\n      margin-right: 6px;\n      flex-shrink: 0;\n    }\n    \n    .node-label {\n      flex: 1;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n    \n    .children {\n      margin-left: 20px;\n      border-left: 1px dotted var(--h2-tree-guide-color, #ccc);\n      padding-left: 8px;\n    }\n    \n    .children.hidden {\n      display: none;\n    }\n  `;\n\n  @property({ type: Array })\n  data: ITreeNode[] = [];\n\n  @state()\n  private _selectedNodeIds = new Set<string>();\n\n  @state()\n  private _expandedNodeIds = new Set<string>();\n\n  render() {\n    return html`\n      <div class=\"tree\">\n        ${this.data.map(node => this._renderNode(node))}\n      </div>\n    `;\n  }\n\n  private _renderNode(node: ITreeNode, level = 0): any {\n    const hasChildren = node.children && node.children.length > 0;\n    const isExpanded = this._expandedNodeIds.has(node.id) || node.expanded;\n    const isSelected = this._selectedNodeIds.has(node.id) || node.selected;\n\n    return html`\n      <div class=\"tree-node\">\n        <div \n          class=\"node-content ${isSelected ? 'selected' : ''} ${node.disabled ? 'disabled' : ''}\"\n          @click=\"${(e: Event) => this._handleNodeClick(node, e)}\"\n          @contextmenu=\"${(e: Event) => this._handleContextMenu(node, e)}\"\n        >\n          <div \n            class=\"expand-icon ${hasChildren ? (isExpanded ? 'expanded' : '') : 'empty'}\"\n            @click=\"${(e: Event) => this._handleExpandClick(node, e)}\"\n          >\n            ${hasChildren ? 'â–¶' : ''}\n          </div>\n          \n          ${node.icon ? html`\n            <div class=\"node-icon\">${node.icon}</div>\n          ` : ''}\n          \n          <div class=\"node-label\" title=\"${node.label}\">\n            ${node.label}\n          </div>\n        </div>\n        \n        ${hasChildren ? html`\n          <div class=\"children ${!isExpanded ? 'hidden' : ''}\">\n            ${node.children!.map(child => this._renderNode(child, level + 1))}\n          </div>\n        ` : ''}\n      </div>\n    `;\n  }\n\n  private _handleNodeClick(node: ITreeNode, e: Event) {\n    if (node.disabled) return;\n    \n    e.stopPropagation();\n    this.selectNode(node.id);\n    \n    const eventData: ITreeEventData = { node, originalEvent: e };\n    \n    this.dispatchEvent(new CustomEvent('node-click', {\n      detail: eventData,\n      bubbles: true,\n      composed: true\n    }));\n    \n    this.dispatchEvent(new CustomEvent('node-select', {\n      detail: eventData,\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  private _handleExpandClick(node: ITreeNode, e: Event) {\n    e.stopPropagation();\n    \n    if (this._expandedNodeIds.has(node.id)) {\n      this.collapseNode(node.id);\n    } else {\n      this.expandNode(node.id);\n    }\n  }\n\n  private _handleContextMenu(node: ITreeNode, e: Event) {\n    if (node.disabled) return;\n    \n    e.preventDefault();\n    \n    this.dispatchEvent(new CustomEvent('node-context-menu', {\n      detail: { node, originalEvent: e },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  setData(nodes: ITreeNode[]): void {\n    this.data = [...nodes];\n    this._selectedNodeIds.clear();\n    this._expandedNodeIds.clear();\n    \n    this._initializeExpandedNodes(nodes);\n  }\n\n  getData(): ITreeNode[] {\n    return [...this.data];\n  }\n\n  getSelectedNodes(): ITreeNode[] {\n    const selected: ITreeNode[] = [];\n    this._findSelectedNodes(this.data, selected);\n    return selected;\n  }\n\n  getSelectedNode(): ITreeNode | null {\n    const selected = this.getSelectedNodes();\n    return selected.length > 0 ? selected[0] : null;\n  }\n\n  selectNode(id: string): void {\n    this._selectedNodeIds.clear();\n    this._selectedNodeIds.add(id);\n    this.requestUpdate();\n  }\n\n  expandNode(id: string): void {\n    this._expandedNodeIds.add(id);\n    \n    const node = this.findNode(id);\n    if (node) {\n      this.dispatchEvent(new CustomEvent('node-expand', {\n        detail: { node },\n        bubbles: true,\n        composed: true\n      }));\n    }\n    \n    this.requestUpdate();\n  }\n\n  collapseNode(id: string): void {\n    this._expandedNodeIds.delete(id);\n    \n    const node = this.findNode(id);\n    if (node) {\n      this.dispatchEvent(new CustomEvent('node-collapse', {\n        detail: { node },\n        bubbles: true,\n        composed: true\n      }));\n    }\n    \n    this.requestUpdate();\n  }\n\n  expandAll(): void {\n    this._expandAllNodes(this.data);\n    this.requestUpdate();\n  }\n\n  collapseAll(): void {\n    this._expandedNodeIds.clear();\n    this.requestUpdate();\n  }\n\n  findNode(id: string): ITreeNode | null {\n    return this._findNodeById(this.data, id);\n  }\n\n  addNode(parentId: string, node: ITreeNode): void {\n    const parent = this.findNode(parentId);\n    if (parent) {\n      if (!parent.children) {\n        parent.children = [];\n      }\n      parent.children.push(node);\n      this.requestUpdate();\n    }\n  }\n\n  removeNode(id: string): void {\n    this._removeNodeFromTree(this.data, id);\n    this._selectedNodeIds.delete(id);\n    this._expandedNodeIds.delete(id);\n    this.requestUpdate();\n  }\n\n  updateNode(id: string, updates: Partial<ITreeNode>): void {\n    const node = this.findNode(id);\n    if (node) {\n      Object.assign(node, updates);\n      this.requestUpdate();\n    }\n  }\n\n\n  destroy(): void {\n    this.data = [];\n    this._selectedNodeIds.clear();\n    this._expandedNodeIds.clear();\n  }\n\n  private _initializeExpandedNodes(nodes: ITreeNode[]) {\n    for (const node of nodes) {\n      if (node.expanded) {\n        this._expandedNodeIds.add(node.id);\n      }\n      if (node.children) {\n        this._initializeExpandedNodes(node.children);\n      }\n    }\n  }\n\n  private _findSelectedNodes(nodes: ITreeNode[], selected: ITreeNode[]) {\n    for (const node of nodes) {\n      if (this._selectedNodeIds.has(node.id)) {\n        selected.push(node);\n      }\n      if (node.children) {\n        this._findSelectedNodes(node.children, selected);\n      }\n    }\n  }\n\n  private _findNodeById(nodes: ITreeNode[], id: string): ITreeNode | null {\n    for (const node of nodes) {\n      if (node.id === id) {\n        return node;\n      }\n      if (node.children) {\n        const found = this._findNodeById(node.children, id);\n        if (found) return found;\n      }\n    }\n    return null;\n  }\n\n  private _expandAllNodes(nodes: ITreeNode[]) {\n    for (const node of nodes) {\n      if (node.children && node.children.length > 0) {\n        this._expandedNodeIds.add(node.id);\n        this._expandAllNodes(node.children);\n      }\n    }\n  }\n\n  private _removeNodeFromTree(nodes: ITreeNode[], id: string): boolean {\n    for (let i = 0; i < nodes.length; i++) {\n      if (nodes[i].id === id) {\n        nodes.splice(i, 1);\n        return true;\n      }\n      if (nodes[i].children && this._removeNodeFromTree(nodes[i].children!, id)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}","import { LitElement, html, css } from '@esm/lit-all';\nimport { customElement, property, state } from '@esm/lit-all';\n\nexport interface DataGridColumn {\n  key: string;\n  title: string;\n  width?: number;\n  sortable?: boolean;\n  filterable?: boolean;\n  resizable?: boolean;\n  render?: (value: any, row: any) => any;\n}\n\nexport interface DataGridOptions {\n  selectable?: boolean;\n  multiSelect?: boolean;\n  sortable?: boolean;\n  filterable?: boolean;\n  pagination?: boolean;\n  pageSize?: number;\n}\n\n@customElement('h2-datagrid')\nexport class H2DataGrid extends LitElement {\n  static styles = css`\n    :host {\n      display: block;\n      border: 1px solid var(--h2-datagrid-border-color, #e0e0e0);\n      border-radius: 4px;\n      overflow: hidden;\n    }\n    \n    .datagrid {\n      width: 100%;\n      overflow: auto;\n    }\n    \n    .header {\n      background: var(--h2-datagrid-header-bg, #f8f9fa);\n      border-bottom: 1px solid var(--h2-datagrid-border-color, #e0e0e0);\n      display: flex;\n      min-width: 100%;\n    }\n    \n    .header-cell {\n      padding: 12px 8px;\n      font-weight: 600;\n      border-right: 1px solid var(--h2-datagrid-border-color, #e0e0e0);\n      display: flex;\n      align-items: center;\n      gap: 4px;\n      user-select: none;\n      background: var(--h2-datagrid-header-bg, #f8f9fa);\n    }\n    \n    .header-cell:last-child {\n      border-right: none;\n    }\n    \n    .header-cell.sortable {\n      cursor: pointer;\n    }\n    \n    .header-cell.sortable:hover {\n      background: var(--h2-datagrid-header-hover-bg, #e9ecef);\n    }\n    \n    .sort-icon {\n      font-size: 12px;\n      color: var(--h2-datagrid-sort-icon-color, #666);\n    }\n    \n    .body {\n      min-height: 200px;\n    }\n    \n    .row {\n      display: flex;\n      border-bottom: 1px solid var(--h2-datagrid-border-color, #e0e0e0);\n      min-width: 100%;\n    }\n    \n    .row:hover {\n      background: var(--h2-datagrid-row-hover-bg, #f8f9fa);\n    }\n    \n    .row.selected {\n      background: var(--h2-datagrid-row-selected-bg, #e3f2fd);\n    }\n    \n    .cell {\n      padding: 8px;\n      border-right: 1px solid var(--h2-datagrid-border-color, #e0e0e0);\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n    \n    .cell:last-child {\n      border-right: none;\n    }\n    \n    .cell.selectable {\n      cursor: pointer;\n    }\n    \n    .checkbox-cell {\n      width: 40px;\n      flex-shrink: 0;\n      text-align: center;\n    }\n    \n    .pagination {\n      padding: 12px;\n      border-top: 1px solid var(--h2-datagrid-border-color, #e0e0e0);\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      background: var(--h2-datagrid-footer-bg, #f8f9fa);\n    }\n    \n    .pagination-info {\n      font-size: 14px;\n      color: var(--h2-datagrid-text-color, #666);\n    }\n    \n    .pagination-controls {\n      display: flex;\n      gap: 8px;\n    }\n    \n    .pagination-button {\n      padding: 4px 8px;\n      border: 1px solid var(--h2-datagrid-border-color, #e0e0e0);\n      background: white;\n      cursor: pointer;\n      border-radius: 4px;\n    }\n    \n    .pagination-button:hover:not(:disabled) {\n      background: var(--h2-datagrid-button-hover-bg, #f8f9fa);\n    }\n    \n    .pagination-button:disabled {\n      cursor: not-allowed;\n      opacity: 0.5;\n    }\n    \n    .empty-state {\n      padding: 40px;\n      text-align: center;\n      color: var(--h2-datagrid-empty-color, #999);\n    }\n  `;\n\n  @property({ type: Array })\n  columns: DataGridColumn[] = [];\n\n  @property({ type: Array })\n  data: any[] = [];\n\n  @property({ type: Object })\n  options: DataGridOptions = {};\n\n  @state()\n  private _selectedRows = new Set<number>();\n\n  @state()\n  private _sortColumn = '';\n\n  @state()\n  private _sortDirection: 'asc' | 'desc' = 'asc';\n\n  @state()\n  private _currentPage = 1;\n\n  @state()\n  private _filteredData: any[] = [];\n\n  connectedCallback() {\n    super.connectedCallback();\n    this._updateFilteredData();\n  }\n\n  updated(changedProperties: Map<string, any>) {\n    super.updated(changedProperties);\n    \n    if (changedProperties.has('data') || changedProperties.has('columns')) {\n      this._updateFilteredData();\n    }\n  }\n\n  render() {\n    const pageSize = this.options.pageSize || 10;\n    const startIndex = (this._currentPage - 1) * pageSize;\n    const endIndex = startIndex + pageSize;\n    const pageData = this.options.pagination ? \n      this._filteredData.slice(startIndex, endIndex) : \n      this._filteredData;\n\n    return html`\n      <div class=\"datagrid\">\n        ${this._renderHeader()}\n        <div class=\"body\">\n          ${pageData.length === 0 ? this._renderEmptyState() : pageData.map((row, index) => this._renderRow(row, startIndex + index))}\n        </div>\n        ${this.options.pagination ? this._renderPagination() : ''}\n      </div>\n    `;\n  }\n\n  private _renderHeader() {\n    return html`\n      <div class=\"header\">\n        ${this.options.selectable ? html`\n          <div class=\"header-cell checkbox-cell\">\n            ${this.options.multiSelect ? html`\n              <input \n                type=\"checkbox\" \n                ?checked=\"${this._selectedRows.size === this.data.length && this.data.length > 0}\"\n                @change=\"${this._handleSelectAll}\"\n              />\n            ` : ''}\n          </div>\n        ` : ''}\n        \n        ${this.columns.map(column => html`\n          <div \n            class=\"header-cell ${column.sortable !== false && this.options.sortable !== false ? 'sortable' : ''}\"\n            style=\"width: ${column.width ? column.width + 'px' : 'auto'}; flex: ${column.width ? '0 0 auto' : '1'}\"\n            @click=\"${() => this._handleSort(column)}\"\n          >\n            ${column.title}\n            ${this._sortColumn === column.key ? html`\n              <span class=\"sort-icon\">\n                ${this._sortDirection === 'asc' ? 'â†‘' : 'â†“'}\n              </span>\n            ` : ''}\n          </div>\n        `)}\n      </div>\n    `;\n  }\n\n  private _renderRow(row: any, index: number) {\n    const isSelected = this._selectedRows.has(index);\n    \n    return html`\n      <div class=\"row ${isSelected ? 'selected' : ''}\">\n        ${this.options.selectable ? html`\n          <div class=\"cell checkbox-cell\">\n            <input \n              type=\"${this.options.multiSelect ? 'checkbox' : 'radio'}\"\n              ?checked=\"${isSelected}\"\n              @change=\"${(e: Event) => this._handleRowSelect(index, e)}\"\n            />\n          </div>\n        ` : ''}\n        \n        ${this.columns.map(column => {\n          const value = row[column.key];\n          const content = column.render ? column.render(value, row) : value;\n          \n          return html`\n            <div \n              class=\"cell ${this.options.selectable ? 'selectable' : ''}\"\n              style=\"width: ${column.width ? column.width + 'px' : 'auto'}; flex: ${column.width ? '0 0 auto' : '1'}\"\n              @click=\"${() => this._handleCellClick(row, column, index)}\"\n              title=\"${String(value)}\"\n            >\n              ${content}\n            </div>\n          `;\n        })}\n      </div>\n    `;\n  }\n\n  private _renderEmptyState() {\n    return html`\n      <div class=\"empty-state\">\n        <slot name=\"empty\">No data available</slot>\n      </div>\n    `;\n  }\n\n  private _renderPagination() {\n    const pageSize = this.options.pageSize || 10;\n    const totalPages = Math.ceil(this._filteredData.length / pageSize);\n    const startItem = (this._currentPage - 1) * pageSize + 1;\n    const endItem = Math.min(this._currentPage * pageSize, this._filteredData.length);\n    \n    return html`\n      <div class=\"pagination\">\n        <div class=\"pagination-info\">\n          Showing ${startItem}-${endItem} of ${this._filteredData.length} items\n        </div>\n        <div class=\"pagination-controls\">\n          <button \n            class=\"pagination-button\"\n            ?disabled=\"${this._currentPage === 1}\"\n            @click=\"${() => this._goToPage(this._currentPage - 1)}\"\n          >\n            Previous\n          </button>\n          <span>Page ${this._currentPage} of ${totalPages}</span>\n          <button \n            class=\"pagination-button\"\n            ?disabled=\"${this._currentPage === totalPages}\"\n            @click=\"${() => this._goToPage(this._currentPage + 1)}\"\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleSort(column: DataGridColumn) {\n    if (column.sortable === false || this.options.sortable === false) return;\n    \n    if (this._sortColumn === column.key) {\n      this._sortDirection = this._sortDirection === 'asc' ? 'desc' : 'asc';\n    } else {\n      this._sortColumn = column.key;\n      this._sortDirection = 'asc';\n    }\n    \n    this._updateFilteredData();\n    \n    this.dispatchEvent(new CustomEvent('sort-change', {\n      detail: { column: column.key, direction: this._sortDirection },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  private _handleRowSelect(index: number, e: Event) {\n    const target = e.target as HTMLInputElement;\n    \n    if (this.options.multiSelect) {\n      if (target.checked) {\n        this._selectedRows.add(index);\n      } else {\n        this._selectedRows.delete(index);\n      }\n    } else {\n      this._selectedRows.clear();\n      if (target.checked) {\n        this._selectedRows.add(index);\n      }\n    }\n    \n    this.requestUpdate();\n    \n    this.dispatchEvent(new CustomEvent('selection-change', {\n      detail: { selectedRows: Array.from(this._selectedRows) },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  private _handleSelectAll(e: Event) {\n    const target = e.target as HTMLInputElement;\n    \n    if (target.checked) {\n      this.data.forEach((_, index) => this._selectedRows.add(index));\n    } else {\n      this._selectedRows.clear();\n    }\n    \n    this.requestUpdate();\n    \n    this.dispatchEvent(new CustomEvent('selection-change', {\n      detail: { selectedRows: Array.from(this._selectedRows) },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  private _handleCellClick(row: any, column: DataGridColumn, index: number) {\n    this.dispatchEvent(new CustomEvent('cell-click', {\n      detail: { row, column, index },\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n  private _goToPage(page: number) {\n    const pageSize = this.options.pageSize || 10;\n    const totalPages = Math.ceil(this._filteredData.length / pageSize);\n    \n    if (page >= 1 && page <= totalPages) {\n      this._currentPage = page;\n    }\n  }\n\n  private _updateFilteredData() {\n    let filtered = [...this.data];\n    \n    if (this._sortColumn) {\n      filtered.sort((a, b) => {\n        const aVal = a[this._sortColumn];\n        const bVal = b[this._sortColumn];\n        \n        if (aVal < bVal) return this._sortDirection === 'asc' ? -1 : 1;\n        if (aVal > bVal) return this._sortDirection === 'asc' ? 1 : -1;\n        return 0;\n      });\n    }\n    \n    this._filteredData = filtered;\n  }\n\n  getSelectedRows() {\n    return Array.from(this._selectedRows).map(index => this.data[index]);\n  }\n\n  clearSelection() {\n    this._selectedRows.clear();\n    this.requestUpdate();\n  }\n\n  selectRow(index: number) {\n    if (!this.options.multiSelect) {\n      this._selectedRows.clear();\n    }\n    this._selectedRows.add(index);\n    this.requestUpdate();\n  }\n}"],"names":["H2Tree","LitElement","html","node","level","hasChildren","isExpanded","isSelected","e","child","eventData","nodes","selected","id","parentId","parent","updates","found","i","css","__decorateClass","property","state","customElement","H2DataGrid","changedProperties","pageSize","startIndex","endIndex","pageData","row","index","column","value","content","totalPages","startItem","endItem","target","_","page","filtered","a","b","aVal","bVal"],"mappings":";;;;;;AAKa,IAAAA,IAAN,cAAqBC,EAAqC;AAAA,EAA1D,cAAA;AAAA,UAAA,GAAA,SAAA,GAmFL,KAAA,OAAoB,IAGZ,KAAA,uCAAuB,OAGvB,KAAA,uCAAuB;EAAY;AAAA,EAE3C,SAAS;AACA,WAAAC;AAAA;AAAA,UAED,KAAK,KAAK,IAAI,CAAAC,MAAQ,KAAK,YAAYA,CAAI,CAAC,CAAC;AAAA;AAAA;AAAA,EAGrD;AAAA,EAEQ,YAAYA,GAAiBC,IAAQ,GAAQ;AACnD,UAAMC,IAAcF,EAAK,YAAYA,EAAK,SAAS,SAAS,GACtDG,IAAa,KAAK,iBAAiB,IAAIH,EAAK,EAAE,KAAKA,EAAK,UACxDI,IAAa,KAAK,iBAAiB,IAAIJ,EAAK,EAAE,KAAKA,EAAK;AAEvD,WAAAD;AAAA;AAAA;AAAA,gCAGqBK,IAAa,aAAa,EAAE,IAAIJ,EAAK,WAAW,aAAa,EAAE;AAAA,oBAC3E,CAACK,MAAa,KAAK,iBAAiBL,GAAMK,CAAC,CAAC;AAAA,0BACtC,CAACA,MAAa,KAAK,mBAAmBL,GAAMK,CAAC,CAAC;AAAA;AAAA;AAAA,iCAGvCH,IAAeC,IAAa,aAAa,KAAM,OAAO;AAAA,sBACjE,CAACE,MAAa,KAAK,mBAAmBL,GAAMK,CAAC,CAAC;AAAA;AAAA,cAEtDH,IAAc,MAAM,EAAE;AAAA;AAAA;AAAA,YAGxBF,EAAK,OAAOD;AAAA,qCACaC,EAAK,IAAI;AAAA,cAChC,EAAE;AAAA;AAAA,2CAE2BA,EAAK,KAAK;AAAA,cACvCA,EAAK,KAAK;AAAA;AAAA;AAAA;AAAA,UAIdE,IAAcH;AAAA,iCACUI,IAAwB,KAAX,QAAa;AAAA,cAC9CH,EAAK,SAAU,IAAI,CAASM,MAAA,KAAK,YAAYA,GAAOL,IAAQ,CAAC,CAAC,CAAC;AAAA;AAAA,YAEjE,EAAE;AAAA;AAAA;AAAA,EAGZ;AAAA,EAEQ,iBAAiBD,GAAiBK,GAAU;AAClD,QAAIL,EAAK;AAAU;AAEnB,IAAAK,EAAE,gBAAgB,GACb,KAAA,WAAWL,EAAK,EAAE;AAEvB,UAAMO,IAA4B,EAAE,MAAAP,GAAM,eAAeK,EAAE;AAEtD,SAAA,cAAc,IAAI,YAAY,cAAc;AAAA,MAC/C,QAAQE;AAAA,MACR,SAAS;AAAA,MACT,UAAU;AAAA,IACX,CAAA,CAAC,GAEG,KAAA,cAAc,IAAI,YAAY,eAAe;AAAA,MAChD,QAAQA;AAAA,MACR,SAAS;AAAA,MACT,UAAU;AAAA,IACX,CAAA,CAAC;AAAA,EACJ;AAAA,EAEQ,mBAAmBP,GAAiBK,GAAU;AACpD,IAAAA,EAAE,gBAAgB,GAEd,KAAK,iBAAiB,IAAIL,EAAK,EAAE,IAC9B,KAAA,aAAaA,EAAK,EAAE,IAEpB,KAAA,WAAWA,EAAK,EAAE;AAAA,EAE3B;AAAA,EAEQ,mBAAmBA,GAAiBK,GAAU;AACpD,IAAIL,EAAK,aAETK,EAAE,eAAe,GAEZ,KAAA,cAAc,IAAI,YAAY,qBAAqB;AAAA,MACtD,QAAQ,EAAE,MAAAL,GAAM,eAAeK,EAAE;AAAA,MACjC,SAAS;AAAA,MACT,UAAU;AAAA,IACX,CAAA,CAAC;AAAA,EACJ;AAAA,EAEA,QAAQG,GAA0B;AAC3B,SAAA,OAAO,CAAC,GAAGA,CAAK,GACrB,KAAK,iBAAiB,SACtB,KAAK,iBAAiB,SAEtB,KAAK,yBAAyBA,CAAK;AAAA,EACrC;AAAA,EAEA,UAAuB;AACd,WAAA,CAAC,GAAG,KAAK,IAAI;AAAA,EACtB;AAAA,EAEA,mBAAgC;AAC9B,UAAMC,IAAwB,CAAA;AACzB,gBAAA,mBAAmB,KAAK,MAAMA,CAAQ,GACpCA;AAAA,EACT;AAAA,EAEA,kBAAoC;AAC5B,UAAAA,IAAW,KAAK;AACtB,WAAOA,EAAS,SAAS,IAAIA,EAAS,CAAC,IAAI;AAAA,EAC7C;AAAA,EAEA,WAAWC,GAAkB;AAC3B,SAAK,iBAAiB,SACjB,KAAA,iBAAiB,IAAIA,CAAE,GAC5B,KAAK,cAAc;AAAA,EACrB;AAAA,EAEA,WAAWA,GAAkB;AACtB,SAAA,iBAAiB,IAAIA,CAAE;AAEtB,UAAAV,IAAO,KAAK,SAASU,CAAE;AAC7B,IAAIV,KACG,KAAA,cAAc,IAAI,YAAY,eAAe;AAAA,MAChD,QAAQ,EAAE,MAAAA,EAAK;AAAA,MACf,SAAS;AAAA,MACT,UAAU;AAAA,IACX,CAAA,CAAC,GAGJ,KAAK,cAAc;AAAA,EACrB;AAAA,EAEA,aAAaU,GAAkB;AACxB,SAAA,iBAAiB,OAAOA,CAAE;AAEzB,UAAAV,IAAO,KAAK,SAASU,CAAE;AAC7B,IAAIV,KACG,KAAA,cAAc,IAAI,YAAY,iBAAiB;AAAA,MAClD,QAAQ,EAAE,MAAAA,EAAK;AAAA,MACf,SAAS;AAAA,MACT,UAAU;AAAA,IACX,CAAA,CAAC,GAGJ,KAAK,cAAc;AAAA,EACrB;AAAA,EAEA,YAAkB;AACX,SAAA,gBAAgB,KAAK,IAAI,GAC9B,KAAK,cAAc;AAAA,EACrB;AAAA,EAEA,cAAoB;AAClB,SAAK,iBAAiB,SACtB,KAAK,cAAc;AAAA,EACrB;AAAA,EAEA,SAASU,GAA8B;AACrC,WAAO,KAAK,cAAc,KAAK,MAAMA,CAAE;AAAA,EACzC;AAAA,EAEA,QAAQC,GAAkBX,GAAuB;AACzC,UAAAY,IAAS,KAAK,SAASD,CAAQ;AACrC,IAAIC,MACGA,EAAO,aACVA,EAAO,WAAW,KAEbA,EAAA,SAAS,KAAKZ,CAAI,GACzB,KAAK,cAAc;AAAA,EAEvB;AAAA,EAEA,WAAWU,GAAkB;AACtB,SAAA,oBAAoB,KAAK,MAAMA,CAAE,GACjC,KAAA,iBAAiB,OAAOA,CAAE,GAC1B,KAAA,iBAAiB,OAAOA,CAAE,GAC/B,KAAK,cAAc;AAAA,EACrB;AAAA,EAEA,WAAWA,GAAYG,GAAmC;AAClD,UAAAb,IAAO,KAAK,SAASU,CAAE;AAC7B,IAAIV,MACK,OAAA,OAAOA,GAAMa,CAAO,GAC3B,KAAK,cAAc;AAAA,EAEvB;AAAA,EAGA,UAAgB;AACd,SAAK,OAAO,IACZ,KAAK,iBAAiB,SACtB,KAAK,iBAAiB;EACxB;AAAA,EAEQ,yBAAyBL,GAAoB;AACnD,eAAWR,KAAQQ;AACjB,MAAIR,EAAK,YACF,KAAA,iBAAiB,IAAIA,EAAK,EAAE,GAE/BA,EAAK,YACF,KAAA,yBAAyBA,EAAK,QAAQ;AAAA,EAGjD;AAAA,EAEQ,mBAAmBQ,GAAoBC,GAAuB;AACpE,eAAWT,KAAQQ;AACjB,MAAI,KAAK,iBAAiB,IAAIR,EAAK,EAAE,KACnCS,EAAS,KAAKT,CAAI,GAEhBA,EAAK,YACF,KAAA,mBAAmBA,EAAK,UAAUS,CAAQ;AAAA,EAGrD;AAAA,EAEQ,cAAcD,GAAoBE,GAA8B;AACtE,eAAWV,KAAQQ,GAAO;AACpB,UAAAR,EAAK,OAAOU;AACP,eAAAV;AAET,UAAIA,EAAK,UAAU;AACjB,cAAMc,IAAQ,KAAK,cAAcd,EAAK,UAAUU,CAAE;AAC9C,YAAAI;AAAc,iBAAAA;AAAA,MACpB;AAAA,IACF;AACO,WAAA;AAAA,EACT;AAAA,EAEQ,gBAAgBN,GAAoB;AAC1C,eAAWR,KAAQQ;AACjB,MAAIR,EAAK,YAAYA,EAAK,SAAS,SAAS,MACrC,KAAA,iBAAiB,IAAIA,EAAK,EAAE,GAC5B,KAAA,gBAAgBA,EAAK,QAAQ;AAAA,EAGxC;AAAA,EAEQ,oBAAoBQ,GAAoBE,GAAqB;AACnE,aAASK,IAAI,GAAGA,IAAIP,EAAM,QAAQO,KAAK;AACrC,UAAIP,EAAMO,CAAC,EAAE,OAAOL;AACZ,eAAAF,EAAA,OAAOO,GAAG,CAAC,GACV;AAEL,UAAAP,EAAMO,CAAC,EAAE,YAAY,KAAK,oBAAoBP,EAAMO,CAAC,EAAE,UAAWL,CAAE;AAC/D,eAAA;AAAA,IAEX;AACO,WAAA;AAAA,EACT;AACF;AArVab,EACJ,SAASmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkFhBC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAO;AAAA,GAlFdrB,EAmFX,WAAA,QAAA,CAAA;AAGQoB,EAAA;AAAA,EADPE,EAAM;AAAA,GArFItB,EAsFH,WAAA,oBAAA,CAAA;AAGAoB,EAAA;AAAA,EADPE,EAAM;AAAA,GAxFItB,EAyFH,WAAA,oBAAA,CAAA;AAzFGA,IAANoB,EAAA;AAAA,EADNG,EAAc,SAAS;AAAA,GACXvB,CAAA;;;;;;ACkBA,IAAAwB,IAAN,cAAyBvB,EAAW;AAAA,EAApC,cAAA;AAAA,UAAA,GAAA,SAAA,GAqIL,KAAA,UAA4B,IAG5B,KAAA,OAAc,IAGd,KAAA,UAA2B,IAGnB,KAAA,oCAAoB,OAG5B,KAAQ,cAAc,IAGtB,KAAQ,iBAAiC,OAGzC,KAAQ,eAAe,GAGvB,KAAQ,gBAAuB;EAAC;AAAA,EAEhC,oBAAoB;AAClB,UAAM,kBAAkB,GACxB,KAAK,oBAAoB;AAAA,EAC3B;AAAA,EAEA,QAAQwB,GAAqC;AAC3C,UAAM,QAAQA,CAAiB,IAE3BA,EAAkB,IAAI,MAAM,KAAKA,EAAkB,IAAI,SAAS,MAClE,KAAK,oBAAoB;AAAA,EAE7B;AAAA,EAEA,SAAS;AACD,UAAAC,IAAW,KAAK,QAAQ,YAAY,IACpCC,KAAc,KAAK,eAAe,KAAKD,GACvCE,IAAWD,IAAaD,GACxBG,IAAW,KAAK,QAAQ,aAC5B,KAAK,cAAc,MAAMF,GAAYC,CAAQ,IAC7C,KAAK;AAEA,WAAA1B;AAAA;AAAA,UAED,KAAK,eAAe;AAAA;AAAA,YAElB2B,EAAS,WAAW,IAAI,KAAK,kBAAA,IAAsBA,EAAS,IAAI,CAACC,GAAKC,MAAU,KAAK,WAAWD,GAAKH,IAAaI,CAAK,CAAC,CAAC;AAAA;AAAA,UAE3H,KAAK,QAAQ,aAAa,KAAK,sBAAsB,EAAE;AAAA;AAAA;AAAA,EAG/D;AAAA,EAEQ,gBAAgB;AACf,WAAA7B;AAAA;AAAA,UAED,KAAK,QAAQ,aAAaA;AAAA;AAAA,cAEtB,KAAK,QAAQ,cAAcA;AAAA;AAAA;AAAA,4BAGb,KAAK,cAAc,SAAS,KAAK,KAAK,UAAU,KAAK,KAAK,SAAS,CAAC;AAAA,2BACrE,KAAK,gBAAgB;AAAA;AAAA,gBAEhC,EAAE;AAAA;AAAA,YAEN,EAAE;AAAA;AAAA,UAEJ,KAAK,QAAQ,IAAI,CAAU8B,MAAA9B;AAAA;AAAA,iCAEJ8B,EAAO,aAAa,MAAS,KAAK,QAAQ,aAAa,KAAQ,aAAa,EAAE;AAAA,4BACnFA,EAAO,QAAQA,EAAO,QAAQ,OAAO,MAAM,WAAWA,EAAO,QAAQ,aAAa,GAAG;AAAA,sBAC3F,MAAM,KAAK,YAAYA,CAAM,CAAC;AAAA;AAAA,cAEtCA,EAAO,KAAK;AAAA,cACZ,KAAK,gBAAgBA,EAAO,MAAM9B;AAAA;AAAA,kBAE9B,KAAK,mBAAmB,QAAQ,MAAM,GAAG;AAAA;AAAA,gBAE3C,EAAE;AAAA;AAAA,SAET,CAAC;AAAA;AAAA;AAAA,EAGR;AAAA,EAEQ,WAAW4B,GAAUC,GAAe;AAC1C,UAAMxB,IAAa,KAAK,cAAc,IAAIwB,CAAK;AAExC,WAAA7B;AAAA,wBACaK,IAAa,aAAa,EAAE;AAAA,UAC1C,KAAK,QAAQ,aAAaL;AAAA;AAAA;AAAA,sBAGd,KAAK,QAAQ,cAAc,aAAa,OAAO;AAAA,0BAC3CK,CAAU;AAAA,yBACX,CAACC,MAAa,KAAK,iBAAiBuB,GAAOvB,CAAC,CAAC;AAAA;AAAA;AAAA,YAG1D,EAAE;AAAA;AAAA,UAEJ,KAAK,QAAQ,IAAI,CAAUwB,MAAA;AACrB,YAAAC,IAAQH,EAAIE,EAAO,GAAG,GACtBE,IAAUF,EAAO,SAASA,EAAO,OAAOC,GAAOH,CAAG,IAAIG;AAErD,aAAA/B;AAAA;AAAA,4BAEW,KAAK,QAAQ,aAAa,eAAe,EAAE;AAAA,8BACzC8B,EAAO,QAAQA,EAAO,QAAQ,OAAO,MAAM,WAAWA,EAAO,QAAQ,aAAa,GAAG;AAAA,wBAC3F,MAAM,KAAK,iBAAiBF,GAAKE,GAAQD,CAAK,CAAC;AAAA,uBAChD,OAAOE,CAAK,CAAC;AAAA;AAAA,gBAEpBC,CAAO;AAAA;AAAA;AAAA,IAAA,CAGd,CAAC;AAAA;AAAA;AAAA,EAGR;AAAA,EAEQ,oBAAoB;AACnB,WAAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKT;AAAA,EAEQ,oBAAoB;AACpB,UAAAwB,IAAW,KAAK,QAAQ,YAAY,IACpCS,IAAa,KAAK,KAAK,KAAK,cAAc,SAAST,CAAQ,GAC3DU,KAAa,KAAK,eAAe,KAAKV,IAAW,GACjDW,IAAU,KAAK,IAAI,KAAK,eAAeX,GAAU,KAAK,cAAc,MAAM;AAEzE,WAAAxB;AAAA;AAAA;AAAA,oBAGSkC,CAAS,IAAIC,CAAO,OAAO,KAAK,cAAc,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA,yBAK/C,KAAK,iBAAiB,CAAC;AAAA,sBAC1B,MAAM,KAAK,UAAU,KAAK,eAAe,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA,uBAI1C,KAAK,YAAY,OAAOF,CAAU;AAAA;AAAA;AAAA,yBAGhC,KAAK,iBAAiBA,CAAU;AAAA,sBACnC,MAAM,KAAK,UAAU,KAAK,eAAe,CAAC,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/D;AAAA,EAEQ,YAAYH,GAAwB;AAC1C,IAAIA,EAAO,aAAa,MAAS,KAAK,QAAQ,aAAa,OAEvD,KAAK,gBAAgBA,EAAO,MAC9B,KAAK,iBAAiB,KAAK,mBAAmB,QAAQ,SAAS,SAE/D,KAAK,cAAcA,EAAO,KAC1B,KAAK,iBAAiB,QAGxB,KAAK,oBAAoB,GAEpB,KAAA,cAAc,IAAI,YAAY,eAAe;AAAA,MAChD,QAAQ,EAAE,QAAQA,EAAO,KAAK,WAAW,KAAK,eAAe;AAAA,MAC7D,SAAS;AAAA,MACT,UAAU;AAAA,IACX,CAAA,CAAC;AAAA,EACJ;AAAA,EAEQ,iBAAiBD,GAAevB,GAAU;AAChD,UAAM8B,IAAS9B,EAAE;AAEb,IAAA,KAAK,QAAQ,cACX8B,EAAO,UACJ,KAAA,cAAc,IAAIP,CAAK,IAEvB,KAAA,cAAc,OAAOA,CAAK,KAGjC,KAAK,cAAc,SACfO,EAAO,WACJ,KAAA,cAAc,IAAIP,CAAK,IAIhC,KAAK,cAAc,GAEd,KAAA,cAAc,IAAI,YAAY,oBAAoB;AAAA,MACrD,QAAQ,EAAE,cAAc,MAAM,KAAK,KAAK,aAAa,EAAE;AAAA,MACvD,SAAS;AAAA,MACT,UAAU;AAAA,IACX,CAAA,CAAC;AAAA,EACJ;AAAA,EAEQ,iBAAiB,GAAU;AAGjC,IAFe,EAAE,OAEN,UACJ,KAAA,KAAK,QAAQ,CAACQ,GAAGR,MAAU,KAAK,cAAc,IAAIA,CAAK,CAAC,IAE7D,KAAK,cAAc,SAGrB,KAAK,cAAc,GAEd,KAAA,cAAc,IAAI,YAAY,oBAAoB;AAAA,MACrD,QAAQ,EAAE,cAAc,MAAM,KAAK,KAAK,aAAa,EAAE;AAAA,MACvD,SAAS;AAAA,MACT,UAAU;AAAA,IACX,CAAA,CAAC;AAAA,EACJ;AAAA,EAEQ,iBAAiBD,GAAUE,GAAwBD,GAAe;AACnE,SAAA,cAAc,IAAI,YAAY,cAAc;AAAA,MAC/C,QAAQ,EAAE,KAAAD,GAAK,QAAAE,GAAQ,OAAAD,EAAM;AAAA,MAC7B,SAAS;AAAA,MACT,UAAU;AAAA,IACX,CAAA,CAAC;AAAA,EACJ;AAAA,EAEQ,UAAUS,GAAc;AACxB,UAAAd,IAAW,KAAK,QAAQ,YAAY,IACpCS,IAAa,KAAK,KAAK,KAAK,cAAc,SAAST,CAAQ;AAE7D,IAAAc,KAAQ,KAAKA,KAAQL,MACvB,KAAK,eAAeK;AAAA,EAExB;AAAA,EAEQ,sBAAsB;AAC5B,QAAIC,IAAW,CAAC,GAAG,KAAK,IAAI;AAE5B,IAAI,KAAK,eACEA,EAAA,KAAK,CAACC,GAAGC,MAAM;AAChB,YAAAC,IAAOF,EAAE,KAAK,WAAW,GACzBG,IAAOF,EAAE,KAAK,WAAW;AAE/B,aAAIC,IAAOC,IAAa,KAAK,mBAAmB,QAAQ,KAAK,IACzDD,IAAOC,IAAa,KAAK,mBAAmB,QAAQ,IAAI,KACrD;AAAA,IAAA,CACR,GAGH,KAAK,gBAAgBJ;AAAA,EACvB;AAAA,EAEA,kBAAkB;AACT,WAAA,MAAM,KAAK,KAAK,aAAa,EAAE,IAAI,CAASV,MAAA,KAAK,KAAKA,CAAK,CAAC;AAAA,EACrE;AAAA,EAEA,iBAAiB;AACf,SAAK,cAAc,SACnB,KAAK,cAAc;AAAA,EACrB;AAAA,EAEA,UAAUA,GAAe;AACnB,IAAC,KAAK,QAAQ,eAChB,KAAK,cAAc,SAEhB,KAAA,cAAc,IAAIA,CAAK,GAC5B,KAAK,cAAc;AAAA,EACrB;AACF;AAvZaoIhBC,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAO;AAAA,GApIdG,EAqIX,WAAA,WAAA,CAAA;AAGAJ,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,OAAO;AAAA,GAvIdG,EAwIX,WAAA,QAAA,CAAA;AAGAJ,EAAA;AAAA,EADCC,EAAS,EAAE,MAAM,QAAQ;AAAA,GA1IfG,EA2IX,WAAA,WAAA,CAAA;AAGQJ,EAAA;AAAA,EADPE,EAAM;AAAA,GA7IIE,EA8IH,WAAA,iBAAA,CAAA;AAGAJ,EAAA;AAAA,EADPE,EAAM;AAAA,GAhJIE,EAiJH,WAAA,eAAA,CAAA;AAGAJ,EAAA;AAAA,EADPE,EAAM;AAAA,GAnJIE,EAoJH,WAAA,kBAAA,CAAA;AAGAJ,EAAA;AAAA,EADPE,EAAM;AAAA,GAtJIE,EAuJH,WAAA,gBAAA,CAAA;AAGAJ,EAAA;AAAA,EADPE,EAAM;AAAA,GAzJIE,EA0JH,WAAA,iBAAA,CAAA;AA1JGA,IAANJ,EAAA;AAAA,EADNG,EAAc,aAAa;AAAA,GACfC,CAAA;"}